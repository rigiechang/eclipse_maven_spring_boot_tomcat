## MySQL
#spring.datasource.url=jdbc:mysql://localhost:3306/mysql_test1
#spring.datasource.username=rchang
#spring.datasource.password=password

#mysql driver
#spring.datasource.driver-class-name =com.mysql.jdbc.Driver


# MariaDB
spring.datasource.url=jdbc:mariadb://localhost:3306/mysql_test1
spring.datasource.username=rchang
spring.datasource.password=password
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

#spring.datasource.url=jdbc:mysql://localhost:3306/test?createDatabaseIfNotExist=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;autoReconnect=true     

## MariaDB
# https://springframework.guru/configuring-spring-boot-for-mariadb/
#spring.datasource.url=jdbc:mariadb://localhost:3306/springbootdb
#spring.datasource.username=root
#spring.datasource.password=root
#spring.datasource.driver-class-name=org.mariadb.jdbc.Driver



#`hibernate_sequence' doesn't exist
spring.jpa.hibernate.use-new-id-generator-mappings=false

# drop n create table, good for testing, comment this in production
#create: Creates the database every time but does not drop it on close.
#spring.jpa.hibernate.ddl-auto=create

spring.jpa.generate-ddl=true

#update: Hibernate changes the database according to the given entity structures.
spring.jpa.hibernate.ddl-auto=update

# 	It is a good security practice to, after your database is in a production state, 
#   set this to none, revoke all privileges from the MySQL user connected to the 
#   Spring application, and give the MySQL user only SELECT, UPDATE, INSERT, and DELETE



## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.format_sql=true

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE


# set base path
#spring.data.rest.basePath=/api

#ref link : https://docs.spring.io/spring-data/rest/docs/current/reference/html/#getting-started.changing-base-uri
#https://stackoverflow.com/questions/32927937/how-to-set-base-url-for-rest-in-spring-boot

#For 2.x, use
#server.servlet.context-path=/api


server.servlet.context-path=/DeployMavenToTomcat
server.port=12378


#webcontent vs webapp
#Project directory structure depends on how it was created and the build tool which you are using.
#If you create by selecting File -> New ->Dynamic web project in eclipse, then you find the /WebContent directory.
#If it is created using Maven, directory strutcure will be /src/main/webapp.


#Without any configuration Spring Boot expects the views to be stored 
#inside /webapp, the view page may be of any format depends on application.properties 
#settings(like html or jsp) to set .jsp as view page at /views/ folder
#https://stackoverflow.com/questions/36100212/by-default-where-does-spring-boot-expect-views-to-be-stored

#spring.mvc.view.prefix=/views/
#spring.mvc.view.suffix=.jsp //for .html change it to .html

# By default Spring Boot will serve static content from a folder called /static 
#(or /public or /resources or /META-INF/resources) in the classpath


#View Resolver - Get JSPs
#Note that Spring Boot will map a logical view onto a JSP file inside the folder 
#src/main/webapp/WEB-INF/jsp/

#controller
#    @GetMapping("/viewBooks")
#    public String viewBooks(Model model) {
#        model.addAttribute("books", bookService.getBooks());
#        return "view-books";
#    }
#Spring MVC will look for view-books.jsp inside the /WEB-INF/jsp/ directory
spring.mvc.view.prefix: /WEB-INF/jsp/
spring.mvc.view.suffix: .jsp
